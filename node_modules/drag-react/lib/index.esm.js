/*! drag-react - v1.1.1 | Copyright 2022 - Haikel Fazzani */

import React, { useRef, useCallback, useEffect } from 'react';

function Draggable({ children, style, className, onDragStart, onDragEnd }) {
    const dragRef = useRef(null);
    let isMouseDown = false;
    let offset = [0, 0];
    const onMouseDown = (e) => {
        isMouseDown = true;
        const dragDiv = dragRef.current;
        if (!dragDiv)
            return;
        const isTouch = /touch/g.test(e.type);
        const x = isTouch ? e.touches[0].clientX : e.clientX;
        const y = isTouch ? e.touches[0].clientY : e.clientY;
        offset = [
            dragDiv.offsetLeft - x,
            dragDiv.offsetTop - y
        ];
        if (onDragStart) {
            const rect = dragDiv === null || dragDiv === void 0 ? void 0 : dragDiv.getBoundingClientRect();
            onDragStart(rect);
        }
        dragDiv.addEventListener('mouseup', onMouseUp, true);
        dragDiv.addEventListener('touchend', onMouseUp, true);
        document.addEventListener('contextmenu', onContextMenu, false);
        document.addEventListener('touchmove', onMouseMove, true);
        document.addEventListener('mousemove', onMouseMove, true);
    };
    const onMouseUp = () => {
        var _a;
        isMouseDown = false;
        if (!isMouseDown && onDragEnd) {
            const rect = (_a = dragRef.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();
            onDragEnd(rect);
        }
        document.removeEventListener('touchmove', onMouseMove, true);
        document.removeEventListener('mousemove', onMouseMove, true);
        document.removeEventListener('contextmenu', onContextMenu, false);
    };
    const onMouseMove = useCallback((e) => {
        const isTouch = /touch/g.test(e.type);
        if (!isTouch) {
            e.preventDefault();
        }
        if (isMouseDown && dragRef.current) {
            const x = isTouch ? e.touches[0].clientX : e.clientX;
            const y = isTouch ? e.touches[0].clientY : e.clientY;
            dragRef.current.style.left = (x + offset[0]) + 'px';
            dragRef.current.style.top = (y + offset[1]) + 'px';
        }
    }, []);
    const onContextMenu = () => {
        document.removeEventListener('mousemove', onMouseMove, true);
        document.removeEventListener('touchmove', onMouseMove, true);
    };
    useEffect(() => {
        const dragDiv = dragRef.current;
        dragDiv === null || dragDiv === void 0 ? void 0 : dragDiv.addEventListener('touchstart', onMouseDown, true);
        dragDiv === null || dragDiv === void 0 ? void 0 : dragDiv.addEventListener('mousedown', onMouseDown, true);
        return () => {
            dragDiv === null || dragDiv === void 0 ? void 0 : dragDiv.removeEventListener('mousedown', onMouseDown, true);
            dragDiv === null || dragDiv === void 0 ? void 0 : dragDiv.removeEventListener('mouseup', onMouseUp, true);
            document.removeEventListener('mousemove', onMouseMove, true);
            dragDiv === null || dragDiv === void 0 ? void 0 : dragDiv.removeEventListener('touchstart', onMouseDown, true);
            dragDiv === null || dragDiv === void 0 ? void 0 : dragDiv.removeEventListener('touchend', onMouseUp, true);
            document.removeEventListener('touchmove', onMouseMove, true);
            document.removeEventListener('contextmenu', onContextMenu, false);
        };
    }, []);
    return React.createElement("div", { ref: dragRef, className: className || "drag-react", style: Object.assign({ position: 'fixed', left: '10px', top: '10px', zIndex: 99999, cursor: 'move' }, style) }, children);
}

export { Draggable };
//# sourceMappingURL=index.esm.js.map
