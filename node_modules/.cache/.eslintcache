[{"C:\\Users\\LearnForce\\Desktop\\Task\\puzzle-app\\src\\index.js":"1","C:\\Users\\LearnForce\\Desktop\\Task\\puzzle-app\\src\\App.js":"2","C:\\Users\\LearnForce\\Desktop\\Task\\puzzle-app\\src\\reportWebVitals.js":"3","C:\\Users\\LearnForce\\Desktop\\Task\\puzzle-app\\src\\components\\Homepage.js":"4","C:\\Users\\LearnForce\\Desktop\\Task\\puzzle-app\\src\\components\\navbar.js":"5","C:\\Users\\LearnForce\\Desktop\\Task\\puzzle-app\\src\\components\\Navbar.js":"6","C:\\Users\\LearnForce\\Desktop\\Task\\puzzle-app\\src\\components\\Puzzle.jsx":"7","C:\\Users\\LearnForce\\Desktop\\Task\\puzzle-app\\src\\components\\grid.js":"8"},{"size":535,"mtime":1678960737298,"results":"9","hashOfConfig":"10"},{"size":538,"mtime":1679054750239,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1678960737372,"results":"12","hashOfConfig":"10"},{"size":759,"mtime":1679054750240,"results":"13","hashOfConfig":"10"},{"size":995,"mtime":1678976269658,"results":"14","hashOfConfig":"10"},{"size":1034,"mtime":1679054750240,"results":"15","hashOfConfig":"10"},{"size":5318,"mtime":1679062121920,"results":"16","hashOfConfig":"10"},{"size":598,"mtime":1679054750242,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"mfz1fb",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\LearnForce\\Desktop\\Task\\puzzle-app\\src\\index.js",[],[],[],"C:\\Users\\LearnForce\\Desktop\\Task\\puzzle-app\\src\\App.js",[],[],"C:\\Users\\LearnForce\\Desktop\\Task\\puzzle-app\\src\\reportWebVitals.js",[],[],"C:\\Users\\LearnForce\\Desktop\\Task\\puzzle-app\\src\\components\\Homepage.js",[],[],"C:\\Users\\LearnForce\\Desktop\\Task\\puzzle-app\\src\\components\\navbar.js",["45"],[],"C:\\Users\\LearnForce\\Desktop\\Task\\puzzle-app\\src\\components\\Navbar.js",["46"],[],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport logo from \"../images/logo-puzzle.jpg\"\r\nimport \"./Homepage.css\"\r\nimport \"./Navbar.css\"\r\nconst Navbar = ({size}) => {\r\n    console.log(\"navsize\",size)\r\n    return (\r\n        <>\r\n            {/* <!-- Image and text --> */}\r\n            {/* <nav className=\"navbar navbar-light bg-light\" style={{ backgroundColor: \" \" }}>\r\n                <a className=\"navbar-brand\" href=\"#\">\r\n\r\n                    <img src={logo} style={{ width: \"30\", height: \"30\" }} className=\"align-top\" alt=\"\" />\r\n\r\n                    Puzzle app\r\n\r\n\r\n                </a>\r\n            </nav> */}\r\n\r\n            <span onClick={() => window.scroll(0, 0)} className=\"header\">\r\n                <div className=\"logo\">\r\n                <Link to=\"/\">\r\n                    <img className=\"nav-logo \" src={logo} />\r\n                    </Link>\r\n                </div>\r\n                <div className=\"title\">     Puzzle App </div>\r\n            </span>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Navbar","C:\\Users\\LearnForce\\Desktop\\Task\\puzzle-app\\src\\components\\Puzzle.jsx",["47","48","49"],[],"import React, { useState } from 'react'\r\nimport Navbar from './Navbar'\r\nimport \"./Puzzle.css\"\r\nimport Grid from './grid';\r\nconst Puzzle = () => {\r\n\r\n  const [size, setSize] = useState(0);\r\n  console.log(\"-----\", size)\r\n  function handleInputChange(event) {\r\n    \r\n    const value = event.target.value;\r\n    if (/^[1-5]*$/g.test(value)) {\r\n      setSize(value);\r\n    }\r\n  }\r\n\r\n   const [x, setX] = useState(0);\r\n  const [y, setY] = useState(0);\r\n \r\n  const handleDragEnd = (event) => {\r\n    setX(event.clientX);\r\n    setY(event.clientY);\r\n  };\r\n  const handleDragStart=(event)=> {\r\n          // This method runs when the dragging starts\r\n          console.log(\"Started\")\r\n      }\r\n      \r\n      const handleDrag=(event)=> {\r\n          // This method runs when the component is being dragged\r\n          console.log(\"Dragging...\")\r\n      }\r\n      \r\n    //  const  handleDragEnd=(event)=> {\r\n    //       // This method runs when the dragging stops\r\n    //       console.log(\"Ended\")\r\n    //   }\r\n \r\n    // Render the grid component with the size entered by the user\r\n    console.log(\"grid size------------------:\",size)\r\n    const grid = [];\r\n  \r\n    for (let i = 0; i < size; i++) {\r\n      const row = [];\r\n  \r\n      for (let j = 0; j < size; j++) {\r\n        row.push(Math.floor(Math.random() * 10)); // Generate a random number between 0 and 9\r\n      }\r\n      grid.push(row);\r\n  }\r\n  \r\n  \r\n\r\n\r\n    // const generateGrid = () => {\r\n    //   // get input value\r\n    //   var number = document.getElementById(\"inputNumber\").value;\r\n\r\n    //   // create array of numbers to populate grid\r\n    //   var numbers = [];\r\n    //   for (var i = 1; i <= number * number; i++) {\r\n    //     numbers.push(i);\r\n    //   }\r\n    //   // shuffle numbers array to randomize order\r\n    //   for (var i = numbers.length - 1; i > 0; i--) {\r\n    //     var j = Math.floor(Math.random() * (i + 1));\r\n    //     var temp = numbers[i];\r\n    //     numbers[i] = numbers[j];\r\n    //     numbers[j] = temp;\r\n    //   }\r\n    //   {/* <div class =grid-container>  */ }\r\n    //   // create grid HTML\r\n    //   var gridHTML = \" <table class='table grid-item t '  > \";\r\n    //   for (var i = 0; i < number; i++) {\r\n    //     gridHTML += \"<tr  class=' grid-item '>\";\r\n    //     for (var j = 0; j < number; j++) {\r\n    //       gridHTML += \"<td class=' grid-item  '>\" + numbers[i * number + j] + \"</td>\";\r\n    //     }\r\n    //     gridHTML += \"</tr>\";\r\n    //   }\r\n    //   gridHTML += \"</table>\";\r\n\r\n    //   // add grid HTML to container\r\n    //   document.getElementById(\"gridContainer\").innerHTML = gridHTML;\r\n    // }\r\n    return (\r\n      <>\r\n        <Navbar />\r\n  \r\n        <div className=\"Main-container-puzzle\">\r\n          <form className=\"Main-Box-puzzle\">\r\n            <div className=\"Main-form-content\">\r\n              <h3 className=\"Main-form-title\">Random Grid Generator</h3>\r\n              <div class=\"container\">\r\n                <form>\r\n                  <div class=\"form-group\">\r\n                    <label for=\"inputNumber\">Enter a number:</label>\r\n                    <input class=\"form-control\" id=\"inputNumber\" min=\"1\" max=\"5\" \r\n                     onChange={handleInputChange}\r\n                     required\r\n                      type=\"number\" value={size} \r\n                      // onChange={(e) => { setSize(e.target.value) }}\r\n                      \r\n                      />\r\n                  </div>\r\n                  <button type=\"button\" class=\"btn btn-primary\"\r\n                   \r\n                  // onClick={generateGrid}\r\n                  >Generate Grid</button>\r\n                </form>\r\n\r\n                <div\r\n            style={{ gridTemplateColumns: `repeat(${size}, 1fr)` }}\r\n            className={`gridSelected grid rounded-xl  grid-cols-${size} grid-rows-${size} shadow-4xl  w-full  justify-items-center gap-4   mx-auto p-6`}\r\n        >\r\n            <div>\r\n      {grid.map((row, i) => (\r\n        <div\r\n         draggable\r\n        onDragStart={handleDragStart}\r\n        onDrag={handleDrag}\r\n        onDragEnd={handleDragEnd}\r\n\r\n        className='grid-row' \r\n        key={i}>\r\n          {row.map((cell, j) => (\r\n            <span className='grid-col'\r\n            draggable\r\n        onDragStart={handleDragStart}\r\n        onDrag={handleDrag}\r\n        onDragEnd={handleDragEnd}\r\n\r\n            key={j}>{cell}</span>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n        </div>\r\n                {/* <div id=\"gridContainer\">\r\n                </div> */}\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n\r\n        {/* \r\n      ********************************** */}\r\n        {/* <div className=\"container\">\r\n      <h1>Random Grid Puzzle</h1>\r\n      <div className=\"input-container\">\r\n        <label className=\"input-label\">\r\n          Grid Size:\r\n          <input className=\"input-field\" type=\"number\" value={size} onChange={handleSizeChange} />\r\n        </label>\r\n        <button className=\"generate-button\" onClick={handleGenerateClick}>Generate</button>\r\n      </div>\r\n    </div> */}\r\n      </>\r\n\r\n\r\n    )\r\n  }\r\n\r\n  export default Puzzle","C:\\Users\\LearnForce\\Desktop\\Task\\puzzle-app\\src\\components\\grid.js",[],[],{"ruleId":"50","severity":1,"message":"51","line":33,"column":20,"nodeType":"52","endLine":33,"endColumn":32},{"ruleId":"53","severity":1,"message":"54","line":25,"column":21,"nodeType":"52","endLine":25,"endColumn":61},{"ruleId":"55","severity":1,"message":"56","line":4,"column":8,"nodeType":"57","messageId":"58","endLine":4,"endColumn":12},{"ruleId":"55","severity":1,"message":"59","line":17,"column":11,"nodeType":"57","messageId":"58","endLine":17,"endColumn":12},{"ruleId":"55","severity":1,"message":"60","line":18,"column":10,"nodeType":"57","messageId":"58","endLine":18,"endColumn":11},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-unused-vars","'Grid' is defined but never used.","Identifier","unusedVar","'x' is assigned a value but never used.","'y' is assigned a value but never used."]