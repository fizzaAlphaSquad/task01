{"ast":null,"code":"/*! drag-react - v1.1.1 | Copyright 2022 - Haikel Fazzani */\n\nimport React, { useRef, useCallback, useEffect } from 'react';\nfunction Draggable(_ref) {\n  let {\n    children,\n    style,\n    className,\n    onDragStart,\n    onDragEnd\n  } = _ref;\n  const dragRef = useRef(null);\n  let isMouseDown = false;\n  let offset = [0, 0];\n  const onMouseDown = e => {\n    isMouseDown = true;\n    const dragDiv = dragRef.current;\n    if (!dragDiv) return;\n    const isTouch = /touch/g.test(e.type);\n    const x = isTouch ? e.touches[0].clientX : e.clientX;\n    const y = isTouch ? e.touches[0].clientY : e.clientY;\n    offset = [dragDiv.offsetLeft - x, dragDiv.offsetTop - y];\n    if (onDragStart) {\n      const rect = dragDiv === null || dragDiv === void 0 ? void 0 : dragDiv.getBoundingClientRect();\n      onDragStart(rect);\n    }\n    dragDiv.addEventListener('mouseup', onMouseUp, true);\n    dragDiv.addEventListener('touchend', onMouseUp, true);\n    document.addEventListener('contextmenu', onContextMenu, false);\n    document.addEventListener('touchmove', onMouseMove, true);\n    document.addEventListener('mousemove', onMouseMove, true);\n  };\n  const onMouseUp = () => {\n    var _a;\n    isMouseDown = false;\n    if (!isMouseDown && onDragEnd) {\n      const rect = (_a = dragRef.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();\n      onDragEnd(rect);\n    }\n    document.removeEventListener('touchmove', onMouseMove, true);\n    document.removeEventListener('mousemove', onMouseMove, true);\n    document.removeEventListener('contextmenu', onContextMenu, false);\n  };\n  const onMouseMove = useCallback(e => {\n    const isTouch = /touch/g.test(e.type);\n    if (!isTouch) {\n      e.preventDefault();\n    }\n    if (isMouseDown && dragRef.current) {\n      const x = isTouch ? e.touches[0].clientX : e.clientX;\n      const y = isTouch ? e.touches[0].clientY : e.clientY;\n      dragRef.current.style.left = x + offset[0] + 'px';\n      dragRef.current.style.top = y + offset[1] + 'px';\n    }\n  }, []);\n  const onContextMenu = () => {\n    document.removeEventListener('mousemove', onMouseMove, true);\n    document.removeEventListener('touchmove', onMouseMove, true);\n  };\n  useEffect(() => {\n    const dragDiv = dragRef.current;\n    dragDiv === null || dragDiv === void 0 ? void 0 : dragDiv.addEventListener('touchstart', onMouseDown, true);\n    dragDiv === null || dragDiv === void 0 ? void 0 : dragDiv.addEventListener('mousedown', onMouseDown, true);\n    return () => {\n      dragDiv === null || dragDiv === void 0 ? void 0 : dragDiv.removeEventListener('mousedown', onMouseDown, true);\n      dragDiv === null || dragDiv === void 0 ? void 0 : dragDiv.removeEventListener('mouseup', onMouseUp, true);\n      document.removeEventListener('mousemove', onMouseMove, true);\n      dragDiv === null || dragDiv === void 0 ? void 0 : dragDiv.removeEventListener('touchstart', onMouseDown, true);\n      dragDiv === null || dragDiv === void 0 ? void 0 : dragDiv.removeEventListener('touchend', onMouseUp, true);\n      document.removeEventListener('touchmove', onMouseMove, true);\n      document.removeEventListener('contextmenu', onContextMenu, false);\n    };\n  }, []);\n  return React.createElement(\"div\", {\n    ref: dragRef,\n    className: className || \"drag-react\",\n    style: Object.assign({\n      position: 'fixed',\n      left: '10px',\n      top: '10px',\n      zIndex: 99999,\n      cursor: 'move'\n    }, style)\n  }, children);\n}\nexport { Draggable };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["/*! drag-react - v1.1.1 | Copyright 2022 - Haikel Fazzani */\n\nimport React, { useRef, useCallback, useEffect } from 'react';\n\nfunction Draggable({ children, style, className, onDragStart, onDragEnd }) {\r\n    const dragRef = useRef(null);\r\n    let isMouseDown = false;\r\n    let offset = [0, 0];\r\n    const onMouseDown = (e) => {\r\n        isMouseDown = true;\r\n        const dragDiv = dragRef.current;\r\n        if (!dragDiv)\r\n            return;\r\n        const isTouch = /touch/g.test(e.type);\r\n        const x = isTouch ? e.touches[0].clientX : e.clientX;\r\n        const y = isTouch ? e.touches[0].clientY : e.clientY;\r\n        offset = [\r\n            dragDiv.offsetLeft - x,\r\n            dragDiv.offsetTop - y\r\n        ];\r\n        if (onDragStart) {\r\n            const rect = dragDiv === null || dragDiv === void 0 ? void 0 : dragDiv.getBoundingClientRect();\r\n            onDragStart(rect);\r\n        }\r\n        dragDiv.addEventListener('mouseup', onMouseUp, true);\r\n        dragDiv.addEventListener('touchend', onMouseUp, true);\r\n        document.addEventListener('contextmenu', onContextMenu, false);\r\n        document.addEventListener('touchmove', onMouseMove, true);\r\n        document.addEventListener('mousemove', onMouseMove, true);\r\n    };\r\n    const onMouseUp = () => {\r\n        var _a;\r\n        isMouseDown = false;\r\n        if (!isMouseDown && onDragEnd) {\r\n            const rect = (_a = dragRef.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();\r\n            onDragEnd(rect);\r\n        }\r\n        document.removeEventListener('touchmove', onMouseMove, true);\r\n        document.removeEventListener('mousemove', onMouseMove, true);\r\n        document.removeEventListener('contextmenu', onContextMenu, false);\r\n    };\r\n    const onMouseMove = useCallback((e) => {\r\n        const isTouch = /touch/g.test(e.type);\r\n        if (!isTouch) {\r\n            e.preventDefault();\r\n        }\r\n        if (isMouseDown && dragRef.current) {\r\n            const x = isTouch ? e.touches[0].clientX : e.clientX;\r\n            const y = isTouch ? e.touches[0].clientY : e.clientY;\r\n            dragRef.current.style.left = (x + offset[0]) + 'px';\r\n            dragRef.current.style.top = (y + offset[1]) + 'px';\r\n        }\r\n    }, []);\r\n    const onContextMenu = () => {\r\n        document.removeEventListener('mousemove', onMouseMove, true);\r\n        document.removeEventListener('touchmove', onMouseMove, true);\r\n    };\r\n    useEffect(() => {\r\n        const dragDiv = dragRef.current;\r\n        dragDiv === null || dragDiv === void 0 ? void 0 : dragDiv.addEventListener('touchstart', onMouseDown, true);\r\n        dragDiv === null || dragDiv === void 0 ? void 0 : dragDiv.addEventListener('mousedown', onMouseDown, true);\r\n        return () => {\r\n            dragDiv === null || dragDiv === void 0 ? void 0 : dragDiv.removeEventListener('mousedown', onMouseDown, true);\r\n            dragDiv === null || dragDiv === void 0 ? void 0 : dragDiv.removeEventListener('mouseup', onMouseUp, true);\r\n            document.removeEventListener('mousemove', onMouseMove, true);\r\n            dragDiv === null || dragDiv === void 0 ? void 0 : dragDiv.removeEventListener('touchstart', onMouseDown, true);\r\n            dragDiv === null || dragDiv === void 0 ? void 0 : dragDiv.removeEventListener('touchend', onMouseUp, true);\r\n            document.removeEventListener('touchmove', onMouseMove, true);\r\n            document.removeEventListener('contextmenu', onContextMenu, false);\r\n        };\r\n    }, []);\r\n    return React.createElement(\"div\", { ref: dragRef, className: className || \"drag-react\", style: Object.assign({ position: 'fixed', left: '10px', top: '10px', zIndex: 99999, cursor: 'move' }, style) }, children);\r\n}\n\nexport { Draggable };\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}