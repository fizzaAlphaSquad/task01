{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LearnForce\\\\Desktop\\\\Task\\\\puzzle-app\\\\src\\\\components\\\\Puzzle.jsx\";\nimport React, { useState } from 'react';\nimport Navbar from './Navbar';\nimport \"./Puzzle.css\";\nimport Grid from './grid';\nimport SortableList from './sort';\nimport PuzzuleGame from './PuzzuleGame';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Puzzle = () => {\n  // const generateGrid = () => {\n  //   // get input value\n  //   var number = document.getElementById(\"inputNumber\").value;\n\n  //   // create array of numbers to populate grid\n  //   var numbers = [];\n  //   for (var i = 1; i <= number * number; i++) {\n  //     numbers.push(i);\n  //   }\n  //   // shuffle numbers array to randomize order\n  //   for (var i = numbers.length - 1; i > 0; i--) {\n  //     var j = Math.floor(Math.random() * (i + 1));\n  //     var temp = numbers[i];\n  //     numbers[i] = numbers[j];\n  //     numbers[j] = temp;\n  //   }\n  //   {/* <div class =grid-container>  */ }\n  //   // create grid HTML\n  //   var gridHTML = \" <table class='table grid-item t '  > \";\n  //   for (var i = 0; i < number; i++) {\n  //     gridHTML += \"<tr  class=' grid-item '>\";\n  //     for (var j = 0; j < number; j++) {\n  //       gridHTML += \"<td class=' grid-item  '>\" + numbers[i * number + j] + \"</td>\";\n  //     }\n  //     gridHTML += \"</tr>\";\n  //   }\n  //   gridHTML += \"</table>\";\n\n  //   // add grid HTML to container\n  //   document.getElementById(\"gridContainer\").innerHTML = gridHTML;\n  // }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_c = Puzzle;\nexport default Puzzle;\nvar _c;\n$RefreshReg$(_c, \"Puzzle\");","map":{"version":3,"names":["React","useState","Navbar","Grid","SortableList","PuzzuleGame","jsxDEV","_jsxDEV","Fragment","_Fragment","Puzzle","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/LearnForce/Desktop/Task/puzzle-app/src/components/Puzzle.jsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport Navbar from './Navbar'\r\nimport \"./Puzzle.css\"\r\nimport Grid from './grid';\r\nimport SortableList from './sort';\r\nimport PuzzuleGame from './PuzzuleGame';\r\nconst Puzzle = () => {\r\n\r\n\r\n\r\n  // const generateGrid = () => {\r\n  //   // get input value\r\n  //   var number = document.getElementById(\"inputNumber\").value;\r\n\r\n  //   // create array of numbers to populate grid\r\n  //   var numbers = [];\r\n  //   for (var i = 1; i <= number * number; i++) {\r\n  //     numbers.push(i);\r\n  //   }\r\n  //   // shuffle numbers array to randomize order\r\n  //   for (var i = numbers.length - 1; i > 0; i--) {\r\n  //     var j = Math.floor(Math.random() * (i + 1));\r\n  //     var temp = numbers[i];\r\n  //     numbers[i] = numbers[j];\r\n  //     numbers[j] = temp;\r\n  //   }\r\n  //   {/* <div class =grid-container>  */ }\r\n  //   // create grid HTML\r\n  //   var gridHTML = \" <table class='table grid-item t '  > \";\r\n  //   for (var i = 0; i < number; i++) {\r\n  //     gridHTML += \"<tr  class=' grid-item '>\";\r\n  //     for (var j = 0; j < number; j++) {\r\n  //       gridHTML += \"<td class=' grid-item  '>\" + numbers[i * number + j] + \"</td>\";\r\n  //     }\r\n  //     gridHTML += \"</tr>\";\r\n  //   }\r\n  //   gridHTML += \"</table>\";\r\n\r\n  //   // add grid HTML to container\r\n  //   document.getElementById(\"gridContainer\").innerHTML = gridHTML;\r\n  // }\r\n  return (\r\n    <>\r\n      <Navbar />\r\n     {/* <SortableList/> */}\r\n  {/* <PuzzuleGame/> */}\r\n       {/* <div className=\"  w-full h-screen pt-10 pb-3 z-50 justify-center items-center\">\r\n        <form className=\"   bg-zinc-300 w-full h-screen \">\r\n          <div className=\"p-3 w-full mt-8 h-7   justify-center items-center \">\r\n            <h3 className=\"Main-form-title\"> Grid Generator</h3>\r\n            <div class=\"container\">\r\n              <form>\r\n                <div class=\"form-group  justify-center items-center\">\r\n                  <label for=\"inputNumber\">Enter a number:</label>\r\n                  <input class=\"form-control\"\r\n                    onChange={handleInputChange}\r\n                    maxlength=\"1\"\r\n                    oninput=\"this.value=this.value.replace(/[^0-9]/g,'');\"\r\n                    type=\"number\" value={size}\r\n                  />\r\n                </div>\r\n              </form>\r\n\r\n              <div\r\n                style={{ gridTemplateColumns: `repeat(${size}, 1fr)` }}\r\n                className={`gridSelected grid rounded-xl  grid-cols-${size} grid-rows-${size} shadow-4xl  w-full  justify-items-center gap-4   mx-auto p-6`}\r\n              >\r\n                <div>\r\n                  {grid.map((row, i) => (\r\n                    <div\r\n                      draggable\r\n                      onDrop={handleDrop}\r\n                      onDragStart={(event,x)=>handleDragStart(event,x)}\r\n                      onDrag={handleDrag}\r\n                      onDragEnd={handleDragEnd}\r\n                      className='grid-row'\r\n                      key={i}>\r\n                      {row.map((cell, j) => (\r\n                        <span className='grid-col'\r\n                          draggable\r\n                          onDrop={handleDrop}\r\n                          onDragStart={handleDragStart}\r\n                          onDrag={handleDrag}\r\n                          onDragEnd={handleDragEnd}\r\n                          key={j}>{cell}</span>\r\n                      ))}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n                <div class=\"modal  bg-zinc-400 pt-10 pb-3 z-50 flex-col  w-full h-screen justify-center items-center opacity-90  absolute top-0 bottom-0 right-0  left-0 border border-zinc-600\">\r\n                  <p class=\"text-xl text-zinc-900 font-bold pb-10 z-50\">You solved this puzzle</p></div>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>  */}\r\n\r\n      {/* \r\n      ********************************** */}\r\n      {/* <div className=\"container\">\r\n      <h1>Random Grid Puzzle</h1>\r\n      <div className=\"input-container\">\r\n        <label className=\"input-label\">\r\n          Grid Size:\r\n          <input className=\"input-field\" type=\"number\" value={size} onChange={handleSizeChange} />\r\n        </label>\r\n        <button className=\"generate-button\" onClick={handleGenerateClick}>Generate</button>\r\n      </div>\r\n    </div> */}\r\n    </>\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default Puzzle"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAO,cAAc;AACrB,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,YAAY,MAAM,QAAQ;AACjC,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACxC,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAInB;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA,oBACEH,OAAA,CAAAE,SAAA;IAAAE,QAAA,eACEJ,OAAA,CAACL,MAAM;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAG,iBAmET;AAIP,CAAC;AAAAC,EAAA,GA5GKN,MAAM;AA8GZ,eAAeA,MAAM;AAAA,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}