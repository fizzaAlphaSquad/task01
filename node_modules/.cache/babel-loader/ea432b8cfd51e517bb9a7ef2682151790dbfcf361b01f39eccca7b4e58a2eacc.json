{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LearnForce\\\\Desktop\\\\Task\\\\puzzle-app\\\\src\\\\components\\\\Puzzle.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Navbar from './Navbar';\nimport \"./Puzzle.css\";\nimport Grid from './grid';\nimport SortableList from './sort';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Puzzle = () => {\n  _s();\n  const [size, setSize] = useState(\"\");\n  console.log(\"-----\", size);\n  function handleInputChange(event) {\n    const value = event.target.value;\n    setSize(value);\n  }\n  //  ************************************** New drag and Drop\n\n  const [numbers, setnumbers] = useState([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"]);\n  const [dragItemIndex, setDragItemIndex] = useState();\n  const [dragOverItemIndex, setDragOverItemIndex] = useState();\n  const handleDragStart = index => {\n    setDragItemIndex(index);\n  };\n  const handleDragOver = event => {\n    event.preventDefault();\n  };\n  const handleDrop = () => {\n    const numbers = [...sports];\n    const dragItem = numbers.splice(dragItemIndex, 1);\n    numbers.splice(dragOverItemIndex, 0, dragItem);\n    setnumbers(_sports);\n  };\n  const handleDragEnter = index => {\n    setDragOverItemIndex(index);\n  };\n  const handleDragLeave = event => {\n    setDragOverItemIndex(undefined);\n  };\n  const handleDragEnd = event => {\n    setDragItemIndex(undefined);\n    setDragOverItemIndex(undefined);\n  };\n  const [x, setX] = useState(0);\n  const [y, setY] = useState(0);\n\n  // const handleDragEnd = (event) => {\n  //   setX(event.clientX);\n  //   setY(event.clientY);\n  // };\n  // const handleswap = (event) => {\n\n  // };\n  // const handleDragStart = (event, id) => {\n  //   // This method runs when the dragging starts\n  //   console.log(\"Started\")\n  //   event.dataTransfer.setData(\"id\", id);\n  // }\n\n  const handleDrag = (event, id) => {\n    // This method runs when the component is being dragged\n    console.log(\"Dragging...\");\n    event.dataTransfer.setData(\"id\", id);\n  };\n\n  // const handleDrop=(e) =>{\n  // \te.preventDefault();\n  // \tvar data = e.dataTransfer.getData(\"id\");\n  // \te.target.appendChild(document.getElementById(data));\n  // }\n\n  // Render the grid component with the size entered by the user\n  console.log(\"grid size------------------:\", size);\n  const grid = [];\n  for (let i = 0; i < size; i++) {\n    const row = [];\n    for (let j = 0; j < size; j++) {\n      row.push(Math.floor(Math.random() * 10)); // Generate a random number between 0 and 9\n    }\n\n    grid.push(row);\n  }\n\n  // const generateGrid = () => {\n  //   // get input value\n  //   var number = document.getElementById(\"inputNumber\").value;\n\n  //   // create array of numbers to populate grid\n  //   var numbers = [];\n  //   for (var i = 1; i <= number * number; i++) {\n  //     numbers.push(i);\n  //   }\n  //   // shuffle numbers array to randomize order\n  //   for (var i = numbers.length - 1; i > 0; i--) {\n  //     var j = Math.floor(Math.random() * (i + 1));\n  //     var temp = numbers[i];\n  //     numbers[i] = numbers[j];\n  //     numbers[j] = temp;\n  //   }\n  //   {/* <div class =grid-container>  */ }\n  //   // create grid HTML\n  //   var gridHTML = \" <table class='table grid-item t '  > \";\n  //   for (var i = 0; i < number; i++) {\n  //     gridHTML += \"<tr  class=' grid-item '>\";\n  //     for (var j = 0; j < number; j++) {\n  //       gridHTML += \"<td class=' grid-item  '>\" + numbers[i * number + j] + \"</td>\";\n  //     }\n  //     gridHTML += \"</tr>\";\n  //   }\n  //   gridHTML += \"</table>\";\n\n  //   // add grid HTML to container\n  //   document.getElementById(\"gridContainer\").innerHTML = gridHTML;\n  // }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SortableList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true);\n};\n_s(Puzzle, \"1js2sX3AjOH6fofZ24C+K4Ccy7c=\");\n_c = Puzzle;\nexport default Puzzle;\nvar _c;\n$RefreshReg$(_c, \"Puzzle\");","map":{"version":3,"names":["React","useState","Navbar","Grid","SortableList","jsxDEV","_jsxDEV","Fragment","_Fragment","Puzzle","_s","size","setSize","console","log","handleInputChange","event","value","target","numbers","setnumbers","dragItemIndex","setDragItemIndex","dragOverItemIndex","setDragOverItemIndex","handleDragStart","index","handleDragOver","preventDefault","handleDrop","sports","dragItem","splice","_sports","handleDragEnter","handleDragLeave","undefined","handleDragEnd","x","setX","y","setY","handleDrag","id","dataTransfer","setData","grid","i","row","j","push","Math","floor","random","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/LearnForce/Desktop/Task/puzzle-app/src/components/Puzzle.jsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport Navbar from './Navbar'\r\nimport \"./Puzzle.css\"\r\nimport Grid from './grid';\r\nimport SortableList from './sort';\r\nconst Puzzle = () => {\r\n\r\n  const [size, setSize] = useState(\"\");\r\n\r\n  console.log(\"-----\", size)\r\n  function handleInputChange(event) {\r\n\r\n    const value = event.target.value;\r\n    setSize(value)\r\n\r\n  }\r\n//  ************************************** New drag and Drop\r\n\r\n  \r\nconst [numbers, setnumbers] = useState([\r\n  \"0\",\r\n  \"1\",\r\n  \"2\",\r\n  \"3\",\r\n  \"4\",\r\n  \"5\",\r\n  \"6\",\r\n  \"7\",\r\n  \"8\",\r\n]);\r\nconst [dragItemIndex, setDragItemIndex] = useState();\r\nconst [dragOverItemIndex, setDragOverItemIndex] = useState();\r\n\r\nconst handleDragStart = index => {\r\n  setDragItemIndex(index)\r\n};\r\n\r\nconst handleDragOver = event => {\r\n  event.preventDefault();\r\n}\r\n\r\nconst handleDrop = () => {\r\n  const numbers = [...sports];\r\n  const dragItem = numbers.splice(dragItemIndex, 1);\r\n  numbers.splice(dragOverItemIndex, 0, dragItem);\r\n  setnumbers(_sports);\r\n}\r\n\r\nconst handleDragEnter = index => {\r\n  setDragOverItemIndex(index)\r\n}\r\n\r\nconst handleDragLeave = (event) => {\r\n  setDragOverItemIndex(undefined)\r\n}\r\n\r\nconst handleDragEnd = event => {\r\n  setDragItemIndex(undefined);\r\n  setDragOverItemIndex(undefined);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n  const [x, setX] = useState(0);\r\n  const [y, setY] = useState(0);\r\n\r\n  // const handleDragEnd = (event) => {\r\n  //   setX(event.clientX);\r\n  //   setY(event.clientY);\r\n  // };\r\n  // const handleswap = (event) => {\r\n\r\n  // };\r\n  // const handleDragStart = (event, id) => {\r\n  //   // This method runs when the dragging starts\r\n  //   console.log(\"Started\")\r\n  //   event.dataTransfer.setData(\"id\", id);\r\n  // }\r\n\r\n  const handleDrag = (event,id) => {\r\n    // This method runs when the component is being dragged\r\n    console.log(\"Dragging...\")\r\n    event.dataTransfer.setData(\"id\", id);\r\n  \r\n  }\r\n\r\n  // const handleDrop=(e) =>{\r\n\t// \te.preventDefault();\r\n\t// \tvar data = e.dataTransfer.getData(\"id\");\r\n\t// \te.target.appendChild(document.getElementById(data));\r\n\t// }\r\n\r\n\r\n  // Render the grid component with the size entered by the user\r\n  console.log(\"grid size------------------:\", size)\r\n  const grid = [];\r\n\r\n  for (let i = 0; i < size; i++) {\r\n    const row = [];\r\n\r\n    for (let j = 0; j < size; j++) {\r\n      row.push(Math.floor(Math.random() * 10)); // Generate a random number between 0 and 9\r\n    }\r\n    grid.push(row);\r\n  }\r\n\r\n\r\n  // const generateGrid = () => {\r\n  //   // get input value\r\n  //   var number = document.getElementById(\"inputNumber\").value;\r\n\r\n  //   // create array of numbers to populate grid\r\n  //   var numbers = [];\r\n  //   for (var i = 1; i <= number * number; i++) {\r\n  //     numbers.push(i);\r\n  //   }\r\n  //   // shuffle numbers array to randomize order\r\n  //   for (var i = numbers.length - 1; i > 0; i--) {\r\n  //     var j = Math.floor(Math.random() * (i + 1));\r\n  //     var temp = numbers[i];\r\n  //     numbers[i] = numbers[j];\r\n  //     numbers[j] = temp;\r\n  //   }\r\n  //   {/* <div class =grid-container>  */ }\r\n  //   // create grid HTML\r\n  //   var gridHTML = \" <table class='table grid-item t '  > \";\r\n  //   for (var i = 0; i < number; i++) {\r\n  //     gridHTML += \"<tr  class=' grid-item '>\";\r\n  //     for (var j = 0; j < number; j++) {\r\n  //       gridHTML += \"<td class=' grid-item  '>\" + numbers[i * number + j] + \"</td>\";\r\n  //     }\r\n  //     gridHTML += \"</tr>\";\r\n  //   }\r\n  //   gridHTML += \"</table>\";\r\n\r\n  //   // add grid HTML to container\r\n  //   document.getElementById(\"gridContainer\").innerHTML = gridHTML;\r\n  // }\r\n  return (\r\n    <>\r\n      <Navbar />\r\n     <SortableList/>\r\n\r\n      {/* <div className=\"  w-full h-screen pt-10 pb-3 z-50 justify-center items-center\">\r\n        <form className=\"   bg-zinc-300 w-full h-screen \">\r\n          <div className=\"p-3 w-full mt-8 h-7   justify-center items-center \">\r\n            <h3 className=\"Main-form-title\"> Grid Generator</h3>\r\n            <div class=\"container\">\r\n              <form>\r\n                <div class=\"form-group  justify-center items-center\">\r\n                  <label for=\"inputNumber\">Enter a number:</label>\r\n                  <input class=\"form-control\"\r\n                    onChange={handleInputChange}\r\n                    maxlength=\"1\"\r\n                    oninput=\"this.value=this.value.replace(/[^0-9]/g,'');\"\r\n                    type=\"number\" value={size}\r\n                  />\r\n                </div>\r\n              </form>\r\n\r\n              <div\r\n                style={{ gridTemplateColumns: `repeat(${size}, 1fr)` }}\r\n                className={`gridSelected grid rounded-xl  grid-cols-${size} grid-rows-${size} shadow-4xl  w-full  justify-items-center gap-4   mx-auto p-6`}\r\n              >\r\n                <div>\r\n                  {grid.map((row, i) => (\r\n                    <div\r\n                      draggable\r\n                      onDrop={handleDrop}\r\n                      onDragStart={handleDragStart}\r\n                      onDrag={handleDrag}\r\n                      onDragEnd={handleDragEnd}\r\n\r\n                      className='grid-row'\r\n                      key={i}>\r\n                      {row.map((cell, j) => (\r\n                        <span className='grid-col'\r\n                          draggable\r\n                          onDrop={handleDrop}\r\n                          onDragStart={handleDragStart}\r\n                          onDrag={handleDrag}\r\n                          onDragEnd={handleDragEnd}\r\n\r\n                          key={j}>{cell}</span>\r\n                      ))}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n                <div class=\"modal  bg-zinc-400 pt-10 pb-3 z-50 flex-col  w-full h-screen justify-center items-center opacity-90  absolute top-0 bottom-0 right-0  left-0 border border-zinc-600\">\r\n                  <p class=\"text-xl text-zinc-900 font-bold pb-10 z-50\">You solved this puzzle</p></div>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div> */}\r\n\r\n      {/* \r\n      ********************************** */}\r\n      {/* <div className=\"container\">\r\n      <h1>Random Grid Puzzle</h1>\r\n      <div className=\"input-container\">\r\n        <label className=\"input-label\">\r\n          Grid Size:\r\n          <input className=\"input-field\" type=\"number\" value={size} onChange={handleSizeChange} />\r\n        </label>\r\n        <button className=\"generate-button\" onClick={handleGenerateClick}>Generate</button>\r\n      </div>\r\n    </div> */}\r\n    </>\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default Puzzle"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}