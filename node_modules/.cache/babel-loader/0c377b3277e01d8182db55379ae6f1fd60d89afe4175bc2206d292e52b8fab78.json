{"ast":null,"code":"import _slicedToArray from\"C:/Users/LearnForce/Desktop/Task/puzzle-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';import Navbar from'./Navbar';import\"./Puzzle.css\";import Grid from'./grid';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Puzzle=function Puzzle(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),size=_useState2[0],setSize=_useState2[1];console.log(\"-----\",size);function handleInputChange(event){var value=event.target.value;if(/^[1-5]*$/g.test(value)){setSize(value);}}var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),x=_useState4[0],setX=_useState4[1];var _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),y=_useState6[0],setY=_useState6[1];var handleDragEnd=function handleDragEnd(event){setX(event.clientX);setY(event.clientY);};var handleDragStart=function handleDragStart(event){// This method runs when the dragging starts\nconsole.log(\"Started\");};var handleDrag=function handleDrag(event){// This method runs when the component is being dragged\nconsole.log(\"Dragging...\");};//  const  handleDragEnd=(event)=> {\n//       // This method runs when the dragging stops\n//       console.log(\"Ended\")\n//   }\n// Render the grid component with the size entered by the user\nconsole.log(\"grid size------------------:\",size);var grid=[];for(var i=0;i<size;i++){var row=[];for(var j=0;j<size;j++){row.push(Math.floor(Math.random()*10));// Generate a random number between 0 and 9\n}grid.push(row);}// const generateGrid = () => {\n//   // get input value\n//   var number = document.getElementById(\"inputNumber\").value;\n//   // create array of numbers to populate grid\n//   var numbers = [];\n//   for (var i = 1; i <= number * number; i++) {\n//     numbers.push(i);\n//   }\n//   // shuffle numbers array to randomize order\n//   for (var i = numbers.length - 1; i > 0; i--) {\n//     var j = Math.floor(Math.random() * (i + 1));\n//     var temp = numbers[i];\n//     numbers[i] = numbers[j];\n//     numbers[j] = temp;\n//   }\n//   {/* <div class =grid-container>  */ }\n//   // create grid HTML\n//   var gridHTML = \" <table class='table grid-item t '  > \";\n//   for (var i = 0; i < number; i++) {\n//     gridHTML += \"<tr  class=' grid-item '>\";\n//     for (var j = 0; j < number; j++) {\n//       gridHTML += \"<td class=' grid-item  '>\" + numbers[i * number + j] + \"</td>\";\n//     }\n//     gridHTML += \"</tr>\";\n//   }\n//   gridHTML += \"</table>\";\n//   // add grid HTML to container\n//   document.getElementById(\"gridContainer\").innerHTML = gridHTML;\n// }\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Navbar,{}),/*#__PURE__*/_jsx(\"div\",{className:\"Main-container-puzzle\",children:/*#__PURE__*/_jsx(\"form\",{className:\"Main-Box-puzzle\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"Main-form-content\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"Main-form-title\",children:\"Random Grid Generator\"}),/*#__PURE__*/_jsxs(\"div\",{class:\"container\",children:[/*#__PURE__*/_jsxs(\"form\",{children:[/*#__PURE__*/_jsxs(\"div\",{class:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{for:\"inputNumber\",children:\"Enter a number:\"}),/*#__PURE__*/_jsx(\"input\",{class:\"form-control\",id:\"inputNumber\",min:\"1\",max:\"5\",onChange:handleInputChange,required:true,type:\"number\",value:size// onChange={(e) => { setSize(e.target.value) }}\n})]}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",class:\"btn btn-primary\"// onClick={generateGrid}\n,children:\"Generate Grid\"})]}),/*#__PURE__*/_jsx(\"div\",{style:{gridTemplateColumns:\"repeat(\".concat(size,\", 1fr)\")},className:\"gridSelected grid rounded-xl  grid-cols-\".concat(size,\" grid-rows-\").concat(size,\" shadow-4xl  w-full  justify-items-center gap-4   mx-auto p-6\"),children:/*#__PURE__*/_jsx(\"div\",{children:grid.map(function(row,i){return/*#__PURE__*/_jsx(\"div\",{draggable:true,onDragStart:handleDragStart,onDrag:handleDrag,onDragEnd:handleDragEnd,className:\"grid-row\",children:row.map(function(cell,j){return/*#__PURE__*/_jsx(\"span\",{className:\"grid-col\",draggable:true,onDragStart:handleDragStart,onDrag:handleDrag,onDragEnd:handleDragEnd,children:cell},j);})},i);})})})]})]})})})]});};export default Puzzle;","map":{"version":3,"names":["React","useState","Navbar","Grid","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Puzzle","_useState","_useState2","_slicedToArray","size","setSize","console","log","handleInputChange","event","value","target","test","_useState3","_useState4","x","setX","_useState5","_useState6","y","setY","handleDragEnd","clientX","clientY","handleDragStart","handleDrag","grid","i","row","j","push","Math","floor","random","children","className","class","for","id","min","max","onChange","required","type","style","gridTemplateColumns","concat","map","draggable","onDragStart","onDrag","onDragEnd","cell"],"sources":["C:/Users/LearnForce/Desktop/Task/puzzle-app/src/components/Puzzle.jsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport Navbar from './Navbar'\r\nimport \"./Puzzle.css\"\r\nimport Grid from './grid';\r\nconst Puzzle = () => {\r\n\r\n  const [size, setSize] = useState(0);\r\n  console.log(\"-----\", size)\r\n  function handleInputChange(event) {\r\n    \r\n    const value = event.target.value;\r\n    if (/^[1-5]*$/g.test(value)) {\r\n      setSize(value);\r\n    }\r\n  }\r\n\r\n   const [x, setX] = useState(0);\r\n  const [y, setY] = useState(0);\r\n \r\n  const handleDragEnd = (event) => {\r\n    setX(event.clientX);\r\n    setY(event.clientY);\r\n  };\r\n  const handleDragStart=(event)=> {\r\n          // This method runs when the dragging starts\r\n          console.log(\"Started\")\r\n      }\r\n      \r\n      const handleDrag=(event)=> {\r\n          // This method runs when the component is being dragged\r\n          console.log(\"Dragging...\")\r\n      }\r\n      \r\n    //  const  handleDragEnd=(event)=> {\r\n    //       // This method runs when the dragging stops\r\n    //       console.log(\"Ended\")\r\n    //   }\r\n \r\n    // Render the grid component with the size entered by the user\r\n    console.log(\"grid size------------------:\",size)\r\n    const grid = [];\r\n  \r\n    for (let i = 0; i < size; i++) {\r\n      const row = [];\r\n  \r\n      for (let j = 0; j < size; j++) {\r\n        row.push(Math.floor(Math.random() * 10)); // Generate a random number between 0 and 9\r\n      }\r\n      grid.push(row);\r\n  }\r\n  \r\n  \r\n\r\n\r\n    // const generateGrid = () => {\r\n    //   // get input value\r\n    //   var number = document.getElementById(\"inputNumber\").value;\r\n\r\n    //   // create array of numbers to populate grid\r\n    //   var numbers = [];\r\n    //   for (var i = 1; i <= number * number; i++) {\r\n    //     numbers.push(i);\r\n    //   }\r\n    //   // shuffle numbers array to randomize order\r\n    //   for (var i = numbers.length - 1; i > 0; i--) {\r\n    //     var j = Math.floor(Math.random() * (i + 1));\r\n    //     var temp = numbers[i];\r\n    //     numbers[i] = numbers[j];\r\n    //     numbers[j] = temp;\r\n    //   }\r\n    //   {/* <div class =grid-container>  */ }\r\n    //   // create grid HTML\r\n    //   var gridHTML = \" <table class='table grid-item t '  > \";\r\n    //   for (var i = 0; i < number; i++) {\r\n    //     gridHTML += \"<tr  class=' grid-item '>\";\r\n    //     for (var j = 0; j < number; j++) {\r\n    //       gridHTML += \"<td class=' grid-item  '>\" + numbers[i * number + j] + \"</td>\";\r\n    //     }\r\n    //     gridHTML += \"</tr>\";\r\n    //   }\r\n    //   gridHTML += \"</table>\";\r\n\r\n    //   // add grid HTML to container\r\n    //   document.getElementById(\"gridContainer\").innerHTML = gridHTML;\r\n    // }\r\n    return (\r\n      <>\r\n        <Navbar />\r\n  \r\n        <div className=\"Main-container-puzzle\">\r\n          <form className=\"Main-Box-puzzle\">\r\n            <div className=\"Main-form-content\">\r\n              <h3 className=\"Main-form-title\">Random Grid Generator</h3>\r\n              <div class=\"container\">\r\n                <form>\r\n                  <div class=\"form-group\">\r\n                    <label for=\"inputNumber\">Enter a number:</label>\r\n                    <input class=\"form-control\" id=\"inputNumber\" min=\"1\" max=\"5\" \r\n                     onChange={handleInputChange}\r\n                     required\r\n                      type=\"number\" value={size} \r\n                      // onChange={(e) => { setSize(e.target.value) }}\r\n                      \r\n                      />\r\n                  </div>\r\n                  <button type=\"button\" class=\"btn btn-primary\"\r\n                   \r\n                  // onClick={generateGrid}\r\n                  >Generate Grid</button>\r\n                </form>\r\n\r\n                <div\r\n            style={{ gridTemplateColumns: `repeat(${size}, 1fr)` }}\r\n            className={`gridSelected grid rounded-xl  grid-cols-${size} grid-rows-${size} shadow-4xl  w-full  justify-items-center gap-4   mx-auto p-6`}\r\n        >\r\n            <div>\r\n      {grid.map((row, i) => (\r\n        <div\r\n         draggable\r\n        onDragStart={handleDragStart}\r\n        onDrag={handleDrag}\r\n        onDragEnd={handleDragEnd}\r\n\r\n        className='grid-row' \r\n        key={i}>\r\n          {row.map((cell, j) => (\r\n            <span className='grid-col'\r\n            draggable\r\n        onDragStart={handleDragStart}\r\n        onDrag={handleDrag}\r\n        onDragEnd={handleDragEnd}\r\n\r\n            key={j}>{cell}</span>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n        </div>\r\n                {/* <div id=\"gridContainer\">\r\n                </div> */}\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n\r\n        {/* \r\n      ********************************** */}\r\n        {/* <div className=\"container\">\r\n      <h1>Random Grid Puzzle</h1>\r\n      <div className=\"input-container\">\r\n        <label className=\"input-label\">\r\n          Grid Size:\r\n          <input className=\"input-field\" type=\"number\" value={size} onChange={handleSizeChange} />\r\n        </label>\r\n        <button className=\"generate-button\" onClick={handleGenerateClick}>Generate</button>\r\n      </div>\r\n    </div> */}\r\n      </>\r\n\r\n\r\n    )\r\n  }\r\n\r\n  export default Puzzle"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}