{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LearnForce\\\\Desktop\\\\Task\\\\puzzle-app\\\\src\\\\components\\\\Puzzle.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Navbar from './Navbar';\nimport \"./Puzzle.css\";\nimport { GridContextProvider, GridDropZone, GridItem, swap, move } from \"react-grid-dnd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Puzzle = () => {\n  _s();\n  // get input value\n  const [number, setNumber] = useState(\"\");\n  const [items, setItems] = React.useState({\n    left: [{\n      position: 0,\n      name: \"ben\"\n    }, {\n      position: 1,\n      name: \"joe\"\n    }, {\n      position: 2,\n      name: \"jason\"\n    }, {\n      position: 3,\n      name: \"chris\"\n    }, {\n      position: 4,\n      name: \"heather\"\n    }],\n    right: [{\n      position: 5,\n      name: \"george\"\n    }, {\n      position: 6,\n      name: \"rupert\"\n    }, {\n      position: 7,\n      name: \"alice\"\n    }, {\n      position: 8,\n      name: \"katherine\"\n    }, {\n      position: 8,\n      name: \"pam\"\n    }, {\n      position: 10,\n      name: \"katie\"\n    }]\n  });\n  function onChange(sourceId, sourceIndex, targetIndex, targetId) {\n    console.log(targetId, sourceId);\n    if (targetId) {\n      const result = move(items[sourceId], items[targetId], sourceIndex, targetIndex);\n      return setItems({\n        ...items,\n        [sourceId]: result[0],\n        [targetId]: result[1]\n      });\n    }\n    const result = swap(items[sourceId], sourceIndex, targetIndex);\n    return setItems({\n      ...items,\n      [sourceId]: result\n    });\n  }\n  const generateGrid = () => {\n    // get input value\n    var number = document.getElementById(\"inputNumber\").value;\n\n    // create array of numbers to populate grid\n    var numbers = [];\n    for (var i = 1; i <= number * number; i++) {\n      numbers.push(i);\n    }\n    // shuffle numbers array to randomize order\n    for (var i = numbers.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = numbers[i];\n      numbers[i] = numbers[j];\n      numbers[j] = temp;\n    }\n    {/* <div class =grid-container>  */}\n    // create grid HTML\n    var gridHTML = \" <table class='table grid-item '  > \";\n    for (var i = 0; i < number; i++) {\n      gridHTML += \"<tr  class=' grid-item '>\";\n      for (var j = 0; j < number; j++) {\n        gridHTML += \"<td class=' grid-item '>\" + numbers[i * number + j] + \"</td>\";\n      }\n      gridHTML += \"</tr>\";\n    }\n    gridHTML += \"</table>\";\n\n    // add grid HTML to container\n    document.getElementById(\"gridContainer\").innerHTML = gridHTML;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Main-container-puzzle\",\n      children: /*#__PURE__*/_jsxDEV(GridContextProvider, {\n        onChange: onChange,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxDEV(GridDropZone, {\n            className: \"dropzone left\",\n            id: \"left\",\n            boxesPerRow: 3,\n            rowHeight: 150,\n            children: items.left.map(item => /*#__PURE__*/_jsxDEV(GridItem, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"grid-item\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"grid-item-content\",\n                  children: item.name.toUpperCase()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 15\n              }, this)\n            }, item.position, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 13\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Puzzle, \"SjUbKyw/2r12yZXvBu9xAy40JXQ=\");\n_c = Puzzle;\nexport default Puzzle;\nvar _c;\n$RefreshReg$(_c, \"Puzzle\");","map":{"version":3,"names":["React","useState","Navbar","GridContextProvider","GridDropZone","GridItem","swap","move","jsxDEV","_jsxDEV","Fragment","_Fragment","Puzzle","_s","number","setNumber","items","setItems","left","position","name","right","onChange","sourceId","sourceIndex","targetIndex","targetId","console","log","result","generateGrid","document","getElementById","value","numbers","i","push","length","j","Math","floor","random","temp","gridHTML","innerHTML","children","fileName","_jsxFileName","lineNumber","columnNumber","className","id","boxesPerRow","rowHeight","map","item","toUpperCase","_c","$RefreshReg$"],"sources":["C:/Users/LearnForce/Desktop/Task/puzzle-app/src/components/Puzzle.jsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport Navbar from './Navbar'\r\nimport \"./Puzzle.css\"\r\nimport {\r\n  GridContextProvider,\r\n  GridDropZone,\r\n  GridItem,\r\n  swap,\r\n  move\r\n} from \"react-grid-dnd\";\r\nconst Puzzle = () => {\r\n  // get input value\r\n  const [number, setNumber] = useState(\"\");\r\n  const [items, setItems] = React.useState({\r\n    left: [\r\n      { position: 0, name: \"ben\" },\r\n      { position: 1, name: \"joe\" },\r\n      { position: 2, name: \"jason\" },\r\n      { position: 3, name: \"chris\" },\r\n      { position: 4, name: \"heather\" }\r\n    ],\r\n    right: [\r\n      { position: 5, name: \"george\" },\r\n      { position: 6, name: \"rupert\" },\r\n      { position: 7, name: \"alice\" },\r\n      { position: 8, name: \"katherine\" },\r\n      { position: 8, name: \"pam\" },\r\n      { position: 10, name: \"katie\" }\r\n    ]\r\n  });\r\n\r\n  function onChange(sourceId, sourceIndex, targetIndex, targetId) {\r\n    console.log(targetId, sourceId);\r\n    if (targetId) {\r\n      const result = move(\r\n        items[sourceId],\r\n        items[targetId],\r\n        sourceIndex,\r\n        targetIndex\r\n      );\r\n      return setItems({\r\n        ...items,\r\n        [sourceId]: result[0],\r\n        [targetId]: result[1]\r\n      });\r\n    }\r\n    const result = swap(items[sourceId], sourceIndex, targetIndex);\r\n    return setItems({\r\n      ...items,\r\n      [sourceId]: result\r\n    });\r\n  }\r\n\r\n  const generateGrid = () => {\r\n    // get input value\r\n    var number = document.getElementById(\"inputNumber\").value;\r\n\r\n    // create array of numbers to populate grid\r\n    var numbers = [];\r\n    for (var i = 1; i <= number * number; i++) {\r\n      numbers.push(i);\r\n    }\r\n    // shuffle numbers array to randomize order\r\n    for (var i = numbers.length - 1; i > 0; i--) {\r\n      var j = Math.floor(Math.random() * (i + 1));\r\n      var temp = numbers[i];\r\n      numbers[i] = numbers[j];\r\n      numbers[j] = temp;\r\n    }\r\n    {/* <div class =grid-container>  */ }\r\n    // create grid HTML\r\n    var gridHTML = \" <table class='table grid-item '  > \";\r\n    for (var i = 0; i < number; i++) {\r\n      gridHTML += \"<tr  class=' grid-item '>\";\r\n      for (var j = 0; j < number; j++) {\r\n        gridHTML += \"<td class=' grid-item '>\" + numbers[i * number + j] + \"</td>\";\r\n      }\r\n      gridHTML += \"</tr>\";\r\n    }\r\n    gridHTML += \"</table>\";\r\n\r\n    // add grid HTML to container\r\n    document.getElementById(\"gridContainer\").innerHTML = gridHTML;\r\n  }\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className=\"Main-container-puzzle\">\r\n        {/* <form className=\"Main-Box-puzzle\">\r\n          <div className=\"Main-form-content\">\r\n            <h3 className=\"Main-form-title\">Random Grid Generator</h3>\r\n\r\n            <div class=\"container\">\r\n\r\n              <form>\r\n                <div class=\"form-group\">\r\n                  <label for=\"inputNumber\">Enter a number:</label>\r\n                  <input type=\"number\" class=\"form-control\" id=\"inputNumber\" min=\"1\" max=\"10\" required />\r\n                </div>\r\n                <button type=\"button\" class=\"btn btn-primary\" onClick={generateGrid}>Generate Grid</button>\r\n\r\n                \r\n             \r\n              </form>\r\n              <div id=\"gridContainer\">\r\n\r\n              </div>\r\n\r\n\r\n            </div>\r\n\r\n          </div>\r\n        </form> */}\r\n<GridContextProvider onChange={onChange}>\r\n      <div className=\"container\">\r\n        <GridDropZone\r\n          className=\"dropzone left\"\r\n          id=\"left\"\r\n          boxesPerRow={3}\r\n          rowHeight={150}\r\n        >\r\n          {items.left.map((item) => (\r\n            <GridItem key={item.position}>\r\n              <div className=\"grid-item\">\r\n                <div className=\"grid-item-content\">\r\n                  {item.name.toUpperCase()}\r\n                </div>\r\n              </div>\r\n            </GridItem>\r\n          ))}\r\n        </GridDropZone>\r\n      </div>\r\n    </GridContextProvider>\r\n\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Puzzle"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}